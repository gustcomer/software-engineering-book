### Singleton

- assures that only on object of some class is instantiated.
- it breaks Single Responsibility Principle because the Class is concerned with
controlling the instances and doing its original stuff at the same time. 

### Strategy

- defines a family of algorithms, encapsulates each one, and makes them 
interchangeable (via composition).
- also known as Policy Pattern.
- it's one strategy to implements Open Closed Principle.
- it's one of many ways to implement Dependency Inversion Principle (DIP).
- Decorators let you change the skin of an object while strategy let you change.
the guts.
- you can change behavior at runtime.
- HAS-A is better than IS-A (favor composition over inheritance).

### Builder

- Factory is concerned with what I build, while Builder is concerned with How I
Build.
- Factory has an interface for each Product it creates, while Builder don't.
- Builder has coordinated steps which are coordinated by a Director. Factorry
doesn't have steps.
- Builder can be configured to work with chaining method calls.