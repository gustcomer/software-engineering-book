INTENT
Decouple an abstraction from its implementation so that the two can vary independently.

ALSO KNOWN AS
Handle/Body

PARTICIPANTS
Abstraction, RefinedAbstraction, Implementor, ConcreteImplementorX, Client

CLASSIFICATION
It is a Structural Pattern because two objects combine to structure a bigger object with more responsibilities than the parts.
It has Object scope because the Abstraction which is the abstraction layer has a ConcreteImplementor Object responsible for the implementation layer

IMPLEMENTATION
The Client code instantiate one or more ConcreteImplementorX.
Then the Client instantiate one or more RefinedAbstractions injecting the corresponding ConcreteImplementorX in the constructor to form the composition.
We call the operation() in the RefinedAbstraction to execute some abstract instructions.
Inside these abstract instructions, different methods() are called in the ConcreteImplementorX to help the abstraction layer to implement its tasks.

INSIGHTS
- It is very similar to the Strategy Pattern, but usually the Strategy interface has one method representing an algorithm or behavior, while the Implementor has a set methods representing some responsibility that the Application should respond.
- moreover, with Strategy you should put specific behaviors in composing external objects, while with Bridge, you should put the implementations in one composed external object and the abstraction rules in the origin.
- furthermore, with Strategy you can have several behaviors but each one represented by a class with one method. While with Bridge, you should have one implementation (debatable) with possibly many methods.
- I can see an Abstraction with more then one Implementor, each one would be an "extension point" for the implementation of some specific part of the application.
- is it possible that each RefinedAbstraction would pick the related ConcreteImplementorX.
- Abstraction in this context is a subjective. It would make sense to name its subclasses as ConcreteAbstractions, but this is a paradox.
- not every application requires separating abstraction and implementation.

COLLABORATIONS

USE CASES
- in Risk management systems, the Implementor could do the technical job of calculating risks for different financial instruments, and the Abstraction could do the more abstract work of assessing the risks. Each RefinedAbstraction could represent one financial instrument.

QUALITIES
- it decouples abstraction and implementation, allowing for one extencion point. It favors OCP.
- you can switch the implementation at runtime.
- separating high-level logic from low-level implementation favors SRP.
- adds another layer of indirection can make the application more complex.

================================================================================
GLOSSARY

Abstraction: layer that isnâ€™t supposed to do any real work on its own. It should delegate the work to the implementation layer.
  - it's represented by interfaces, virtual methods of abstract classes, etc.
  - higher level of abstraction
  - the abstraction can be represented by a graphical user interface (GUI)
Abstraction: class responsible for the high-level algorithm that runs the application.
  - it has an (composition) Implementor
ConcreteImplementorX: each different class represent a different implementation way.
Implementation: do the real work delegated by the Abstraction.
  - aka Platform
  - could be the underlying operating system code (API) which the GUI layer calls in response to user interactions.
Implementor: interface that represents a point of extensions to allow different implementations to serve the abstraction layer.
RefinedAbstraction[optional]: inherits the Abstraction class and could represent different variations of the original set of Abstract instructions.