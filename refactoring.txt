################################################################################
CODE SMELLS - Fowler and Beck

Duplicated Code: same code in more than one place
  - you can solve it with Extract Function
Long Functions: smaller functions are prefered since they are easier to understand.
  - usually apply Extract Function to get smaller functions.
Long Parameter List: 
Misterious Name: use good and descriptive names in functions, modules, variables, classes, etc.
  - related to Change Function Declaration refactor.
Shotgun Surgery[F]: every time you make a change, you have to make a lot of little edits to a lot of different classes.

################################################################################
CODE SMELLS - Joshua Kerievsky

Solution Sprawl[K]: When code and/or data used to perform a responsibility becomes sprawled across numerous classes.
  - similar to Shotgun Surgery but in Solution Sprawl you sense it by observing while in Shotgun Surgery you sense it by doing.
  - related: Move Creation Knowledge to Factory

################################################################################
REFACTORINGS - Fowler and Beck

Change Function Declaration: pick a better function name, add or remove parameters, change parameters names, etc.
Combine Functions into Class: transform group of functions that operate closely together on a common body of data usually passed as arguments to the function call.
Combine Functions into Transform: take different functions that calculate some derived value from some input data and group them in a transforming function on the input data.
  - like Combine Functions into Class
  - a transformation function picks the argument data, deep clone it and return it with added fields, modified values, etc.
Hide Delegate: when we have a class inside another class, don't let the Client code know about the most inner class. Make the owner class access the method inside the inner, and then pass it to the client code.
  - delegate is someone who represents other person, like a proxy. In this context it means a class that has another class inside it and access it.
  - it's basically the definition of the Law of Demeter: an object should not “reach through” its collaborators to access their collaborators' data, methods, or collaborators.
  - the inverse of Hide Delegate is Remove Middle Man.
Encapsulate Collection: avoid returning the data structures contained in classes and provide adder and remover methods instead of setters.
  - don't let public access the data structure directly.
  - if you need a getter method, return a copy of the collection instead of the original collection itself.
Encapsulate Record: take a immutable record and make them mutable behind a Class definition and methods to manipulate this data.
  - in this context, Record would be an immutable data structure without much behavior, just like a Value Object.
  - in this context, encapsulate means put data behind a Class definition, make them mutable, and add some methods to manipulate this data.
Encapsulate Variable: before moving data, first consider encapsulating them with functions, getters and setters.
  - global data is harded to change than functions because you can forward functions and keep the old one for a while.
Extract Class: when a single class has too many data and methods, try to extract some of the data and methods that go together into another class.
  - it is usually common to extract Value Objects from a bigger object.
  - the inverse is Inline Class.
Extract Function [Extract Method]: look at a fragment of code, understand what it is doing, then extract it into its own function named after its purpose.
Extract Variable [Introduce Explaining Variable]: if an expression becomes very complex, create some local variables with good explanatory names and replace part of the expression.
Inline Class: get smaller classes and group them in a bigger class.
  - is the inverse of Extract Class.
Inline Function [Inline Method]: the inverse of Extract Function.
Inline Variable: the inverse of Extract Variable.
Introduce Parameter Object: put a set of related input parameters into a single structure.
Move Field: move a field from a Class, Object or Record to another one.
  - pieces of data that are always passed to functions together are usually best put in a single record.
  - it's very frequent to move a field from a broader class into a more specific object member of the broader class. 
Move Function: when a function (method) references elements in other context (classes) more than the on it currently resides, move it.
Move Statements to Callers: when common behavior used in several places needs to vary in some of its calls, move the varying behavior out of the function to its callers.
  - it is the inverse of Move Statements Into Function.
Move Statements Into Function: if you see some code executed every time a function is called, combine the repeating code into the function itself.
  - it is the inverse of Move Statement to Callers.
Remove Middle Man: if the fowarding of the middle man everytime there is a new feature is irritating, abandon the Law of Demeter.
  - The Law of Demeter should be called Occasionally Useful Suggestion of Demeter.
  - it is the inverse of Hide Delegate
Rename Variable: improve the name of the variable as your understanding of the problem grows.
Replace Primitive with Object: take a primitive and put it behind a object providing additional behavior.
  - this concept is similar to the concept of Value Objects in DDD.
Replace Temp with Query: you take a temporary variable used inside some method of some object and extract it as the object attribute and use some getter method. Then you access the variable with this.variable.
  - depending on the language and the get methods syntax you'll access the variable directly with this.variable or variable().
Split Phase: take each phase of a function and break it into smaller functions. Make one more high level function calling lower level functions representing the steps.
Substitute Algorithm: if you find an easier way to do some task as your knowledge of the problem and the technology grows, just do it.

################################################################################
REFACTORINGS - Joshua Kerievsky

Compose Method: apply Extract Function several times until all of the methods called within the original method are more understandable and at the same level of detail.
Move Creation Knowledge to Factory.
Move Embellishment to Decorator: separate code for special-case behavior that needs to be executed only some of the time in a Decorator.
  - Competes with Replace Conditional Logic with Strategy
Replace Conditional Dispatcher with Command: 
Replace Conditional Logic with Strategy: if you have conditional logic with several variants of a calculation, create a Strategy for each variant and make the method delegate the calculation to a Strategy instance.
Replace Constructors with Creation Methods: if you have multiple constructors with different set of parameters, replace them with Creating Methods.

################################################################################
REFACTORINGS - Tidy First - Beck

Replace Nested Conditional with Guard Clauses: if the condition is an unusual condition, I check the condition early and return if it's true.

################################################################################
GLOSSARY

Conditional Dispatcher: conditional statement (such as a switch) that performs request routing and handling.
Conditional Logic: several ifs and elses, or a big switch.
Creation Methods: static or nonstatic method on a class that instantiates new instances of the class.
Factory Method: the same as Creation Method, but assure the loose coupling of the Factory.
Guard Clause: take nested ifs and bring it up front.
  - aka Early Return Pattern.
responsibility
role