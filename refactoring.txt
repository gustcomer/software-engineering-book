################################################################################
CODE SMELLS - Fowler and Beck

Misterious Name: use good and descriptive names in functions, modules, variables, classes, etc.
  - related to Change Function Declaration refactor.
Shotgun Surgery[F]: every time you make a change, you have to make a lot of little edits to a lot of different classes.

################################################################################
CODE SMELLS - Joshua Kerievsky

Solution Sprawl[K]: When code and/or data used to perform a responsibility becomes sprawled across numerous classes.
  - similar to Shotgun Surgery but in Solution Sprawl you sense it by observing while in Shotgun Surgery you sense it by doing.
  - related: Move Creation Knowledge to Factory

################################################################################
REFACTORINGS - Fowler and Beck

Change Function Declaration: pick a better function name, add or remove parameters, change parameters names, etc.
Encapsulate Variable: before moving data, first consider encapsulating them with functions, getters and setters.
  - global data is harded to change than functions because you can forward functions and keep the old one for a while.
Extract Function [Extract Method]: look at a fragment of code, understand what it is doing, then extract it into its own function named after its purpose.
Extract Variable [Introduce Explaining Variable]: if an expression becomes very complex, create some local variables with good explanatory names and replace part of the expression.
Inline Function [Inline Method]: the inverse of Extract Function.
Inline Variable: the inverse of Extract Variable.

################################################################################
REFACTORINGS - Joshua Kerievsky

Compose Method: apply Extract Function several times until all of the methods called within the original method are more understandable and at the same level of detail.
Move Creation Knowledge to Factory.
Move Embellishment to Decorator: separate code for special-case behavior that needs to be executed only some of the time in a Decorator.
  - Competes with Replace Conditional Logic with Strategy
Replace Conditional Dispatcher with Command: 
Replace Conditional Logic with Strategy: if you have conditional logic with several variants of a calculation, create a Strategy for each variant and make the method delegate the calculation to a Strategy instance.
Replace Constructors with Creation Methods: if you have multiple constructors with different set of parameters, replace them with Creating Methods.

################################################################################
REFACTORINGS - Tidy First - Beck

Replace Nested Conditional with Guard Clauses: if the condition is an unusual condition, I check the condition early and return if it's true.

################################################################################
GLOSSARY

Conditional Dispatcher: conditional statement (such as a switch) that performs request routing and handling.
Conditional Logic: several ifs and elses, or a big switch.
Creation Methods: static or nonstatic method on a class that instantiates new instances of the class.
Factory Method: the same as Creation Method, but assure the loose coupling of the Factory.
Guard Clause: take nested ifs and bring it up front.
  - aka Early Return Pattern.
responsibility
role