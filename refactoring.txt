################################################################################
CODE SMELLS - Fowler and Beck

Duplicated Code: same code in more than one place
  - you can solve it with Extract Function
Long Functions: smaller functions are prefered since they are easier to understand.
  - usually apply Extract Function to get smaller functions.
Long Parameter List: 
Misterious Name: use good and descriptive names in functions, modules, variables, classes, etc.
  - related to Change Function Declaration refactor.
Shotgun Surgery[F]: every time you make a change, you have to make a lot of little edits to a lot of different classes.

################################################################################
CODE SMELLS - Joshua Kerievsky

Solution Sprawl[K]: When code and/or data used to perform a responsibility becomes sprawled across numerous classes.
  - similar to Shotgun Surgery but in Solution Sprawl you sense it by observing while in Shotgun Surgery you sense it by doing.
  - related: Move Creation Knowledge to Factory

################################################################################
REFACTORINGS - Fowler and Beck

Change Function Declaration: pick a better function name, add or remove parameters, change parameters names, etc.
Change Reference to Value: for nested objects within other objects, you can treat it as Value instead of treat it as Reference.
  - whether you're treating a variable as reference or value is evident when you update the variable. If you manipulate the object directly, you treat it as reference, while if you assign a new object, you treat it as value.
  - Value Objects are generally easier to reason about because they are immutable. Also it is easier to pass it around to other parts of the program and not to worry that it might change.
  - you shouldn't do this refactoring if you want to share an object between several objets so the any change is visible to all its collaborators.
  - inverse of Change Value to Reference.
Change Value to Reference: if you use an entity in multiple places and you have to update it, it is wise to use Reference.
  - to make sure that the same instance of the entity is being used in the multiple parts of the program, you should use some kind of repository or singleton.
  - it is the inverse of Change Reference to Value.
Combine Functions into Class: transform group of functions that operate closely together on a common body of data usually passed as arguments to the function call.
Combine Functions into Transform: take different functions that calculate some derived value from some input data and group them in a transforming function on the input data.
  - like Combine Functions into Class.
  - a transformation function picks the argument data, deep clone it and return it with added fields, modified values, etc.
Consolidate Conditional Expression: if you have several conditional checks that result in the same thing like returning 0, consider grouping them with AND or OR conditions.
  - furthermore, you can take the grouped conditions and put them in a function like Extract Function. That way, you replace a statement of what you're doing with a function with a good name explaining why you're doing something.
  - if the checks are tryly independent, then they shouldn't be thought of as a single check.
Decompose Conditional: when you have complex conditional logic with complex conditions and complex legs, extract the condition and legs to functions.
  - by leg I mean the statements that are executed if the condition is satisfied.
  - it's like Extract Function, but applied to conditionals.
Hide Delegate: when we have a class inside another class, don't let the Client code know about the most inner class. Make the owner class access the method inside the inner, and then pass it to the client code.
  - delegate is someone who represents other person, like a proxy. In this context it means a class that has another class inside it and access it.
  - it's basically the definition of the Law of Demeter: an object should not “reach through” its collaborators to access their collaborators' data, methods, or collaborators.
  - the inverse of Hide Delegate is Remove Middle Man.
Encapsulate Collection: avoid returning the data structures contained in classes and provide adder and remover methods instead of setters.
  - don't let public access the data structure directly.
  - if you need a getter method, return a copy of the collection instead of the original collection itself.
Encapsulate Record: take a immutable record and make them mutable behind a Class definition and methods to manipulate this data.
  - in this context, Record would be an immutable data structure without much behavior, just like a Value Object.
  - in this context, encapsulate means put data behind a Class definition, make them mutable, and add some methods to manipulate this data.
Encapsulate Variable: before moving data, first consider encapsulating them with functions, getters and setters.
  - global data is harded to change than functions because you can forward functions and keep the old one for a while.
Extract Class: when a single class has too many data and methods, try to extract some of the data and methods that go together into another class.
  - it is usually common to extract Value Objects from a bigger object.
  - the inverse is Inline Class.
Extract Function [Extract Method]: look at a fragment of code, understand what it is doing, then extract it into its own function named after its purpose.
Extract Variable [Introduce Explaining Variable]: if an expression becomes very complex, create some local variables with good explanatory names and replace part of the expression.
Inline Class: get smaller classes and group them in a bigger class.
  - is the inverse of Extract Class.
Inline Function [Inline Method]: the inverse of Extract Function.
Inline Variable: the inverse of Extract Variable.
Introduce Parameter Object: put a set of related input parameters into a single structure.
Move Field: move a field from a Class, Object or Record to another one.
  - pieces of data that are always passed to functions together are usually best put in a single record.
  - it's very frequent to move a field from a broader class into a more specific object member of the broader class. 
Move Function: when a function (method) references elements in other context (classes) more than the on it currently resides, move it.
Move Statements to Callers: when common behavior used in several places needs to vary in some of its calls, move the varying behavior out of the function to its callers.
  - it is the inverse of Move Statements Into Function.
Move Statements Into Function: if you see some code executed every time a function is called, combine the repeating code into the function itself.
  - it is the inverse of Move Statement to Callers.
Remove Dead Code: if the code isn't used anymore, delete it. It can become a burden to understand what the code does and that is never called.
  - don't comment out dead code, you can dig it with version control in case you need the deleted code one day.
Remove Middle Man: if the fowarding of the middle man everytime there is a new feature is irritating, abandon the Law of Demeter.
  - The Law of Demeter should be called Occasionally Useful Suggestion of Demeter.
  - it is the inverse of Hide Delegate.
Rename Field: improve the name of fields to be more descriptive.
Rename Variable: improve the name of the variable as your understanding of the problem grows.
Replace Derived Variable with Query: remove variables that you could easily calculate.
  - instead of storing a variable that is a simple calculation, do the simple calculation every time you query the result.
  - it's more readable and if the calculation is simple, it won't affect performance.
Replace Inline Code with Function Call: take a piece of code and put it in a function with a good descriptive name.
  - similar to Extract Function, but applied to small pieces of code.
Replace Loop with Pipeline: instead of use loops to iterate over a collection, use collection pipelines to do the task as a series of operations.
  - each step consumes and emits a collection, like chaining operations.
Replace Nested Conditional with Guard Clauses: if the leg of the nested conditional indicates an unusual condition, bring the nested condition upfront with a guard clause.
  - a guard clause simply mean to check an unusual condition upfront and return if true.
  - it's a tool to bring nested if conditionals to the first conditional level.
  - if both legs are part of normal behavior, simply use if and else.
  - simple if then else communicates that the legs are equally likely and important.
  - guard clauses communicate that this isn't core to this function, and if it happens, do something and get out.
  - functions should have one entry point, but having multiple exit points instead of one can be useful and improve clarity.
Replace Primitive with Object: take a primitive and put it behind a object providing additional behavior.
  - this concept is similar to the concept of Value Objects in DDD.
Replace Temp with Query: you take a temporary variable used inside some method of some object and extract it as the object attribute and use some getter method. Then you access the variable with this.variable.
  - depending on the language and the get methods syntax you'll access the variable directly with this.variable or variable().
Slide Statements: move together things that are related to each other. Declare variables just before you first use them.
Split Loop: if you have a loop doing two or more things, split it so it becomes more readable.
  - if the loop isn't splitted, when you have to change one thing you'll have to understand the other thing as well.
Split Phase: take each phase of a function and break it into smaller functions. Make one more high level function calling lower level functions representing the steps.
Split Variable: a variable should not have more than one responsibility, otherwise it can become very confusing.
  - substitute variable declared with let that is assigned several times by variables declared with const that are assigned once.
Substitute Algorithm: if you find an easier way to do some task as your knowledge of the problem and the technology grows, just do it.

################################################################################
REFACTORINGS - Joshua Kerievsky

Compose Method: apply Extract Function several times until all of the methods called within the original method are more understandable and at the same level of detail.
Move Creation Knowledge to Factory.
Move Embellishment to Decorator: separate code for special-case behavior that needs to be executed only some of the time in a Decorator.
  - Competes with Replace Conditional Logic with Strategy
Replace Conditional Dispatcher with Command: 
Replace Conditional Logic with Strategy: if you have conditional logic with several variants of a calculation, create a Strategy for each variant and make the method delegate the calculation to a Strategy instance.
Replace Constructors with Creation Methods: if you have multiple constructors with different set of parameters, replace them with Creating Methods.

################################################################################
REFACTORINGS - Tidy First - Beck

Replace Nested Conditional with Guard Clauses: if the condition is an unusual condition, I check the condition early and return if it's true.

################################################################################
GLOSSARY

Conditional Dispatcher: conditional statement (such as a switch) that performs request routing and handling.
Conditional Logic: several ifs and elses, or a big switch.
Creation Methods: static or nonstatic method on a class that instantiates new instances of the class.
Factory Method: the same as Creation Method, but assure the loose coupling of the Factory.
Guard Clause: take nested ifs and bring it up front.
  - aka Early Return Pattern.
responsibility
role